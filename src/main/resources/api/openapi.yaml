openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
tags:
  - name: Auth
    description: Аутентификация и регистрация
  - name: Bookings
    description: Операции с бронированиями
  - name: User
    description: Настройки уведомлений пользователя
  - name: Admin
    description: Административные функции
  - name: Events
    description: Управление мероприятиями
paths:
  /user/notifications:
    get:
      tags:
        - User
      summary: Получить настройки уведомлений
      operationId: userNotificationsGet
      responses:
        '200':
          description: Настройки уведомлений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Обновить настройки уведомлений
      operationId: userNotificationsPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferences'
      responses:
        '200':
          description: Настройки обновлены
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Настройки уведомлений не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User
      summary: Отменить уведомления
      operationId: userNotificationsDelete
      responses:
        '204':
          description: Настройки удалены
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/bookings/{id}':
    get:
      tags:
        - Bookings
      summary: Получить бронирование по ID
      operationId: bookingsIdGet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - userAuth: []
    put:
      tags:
        - Bookings
      summary: Обновить бронирование
      operationId: bookingsIdPut
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - userAuth: []
    delete:
      tags:
        - Bookings
      summary: Отменить бронирование
      operationId: bookingsIdDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Бронирование отменено
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - userAuth: []
  '/admin/events/{id}':
    put:
      tags:
        - Admin
      summary: Обновить мероприятие (Admin)
      operationId: eventsIdPut
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Admin
      summary: Удалить мероприятие (Admin)
      operationId: eventsIdDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Мероприятие удалено
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  '/admin/bookings/{id}/confirm':
    put:
      tags:
        - Admin
      summary: Подтвердить бронирование (Admin)
      operationId: adminBookingsIdConfirm
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Бронирование подтверждено
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /user/telegram/link:
    post:
      tags:
        - User
      summary: Инициировать привязку Telegram
      operationId: userTelegramLinkPost
      responses:
        '200':
          description: Код для /start команды в боте
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookings:
    get:
      tags:
        - Bookings
      summary: Получить свои бронирования
      operationId: bookingsGet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - userAuth: []
    post:
      tags:
        - Bookings
      summary: Создать бронирование
      operationId: bookingsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - userAuth: []
  /auth/register:
    post:
      tags:
        - Auth
      summary: Регистрация пользователя
      operationId: authRegisterPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '404':
          description: Ошибка валидации логина или пароля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Вход в систему
      operationId: authLoginPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверное имя пользователя или пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/events:
    post:
      tags:
        - Admin
      summary: Создать мероприятие (Admin)
      operationId: eventsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  '/admin/events/{id}/cover':
    post:
      tags:
        - Admin
      summary: Загрузить обложку мероприятия (Admin)
      operationId: eventsIdCoverPost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cover:
                  type: string
                  description: 'Файл изображения (JPEG/PNG, макс. 5MB)'
                  format: binary
      responses:
        '200':
          description: Обложка обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Конфликт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: Файл слишком большой
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Admin
      summary: Удалить обложку мероприятия (Admin)
      operationId: eventsIdCoverDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Обложка удалена
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /events:
    get:
      tags:
        - Events
      summary: Получить список мероприятий
      operationId: eventsGet
      parameters:
        - name: from
          in: query
          description: Фильтр от даты
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Фильтр до даты
          required: false
          schema:
            type: string
            format: date-time
        - name: pageable
          in: query
          description: Параметры пагинации и сортировки
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Список мероприятий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableEventResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/events/{id}':
    get:
      tags:
        - Events
      summary: Получить мероприятие по ID
      operationId: eventsIdGet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Мероприятие
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/bookings:
    get:
      tags:
        - Admin
      summary: Получить все бронирования (Admin)
      operationId: adminBookingsGet
      parameters:
        - name: eventId
          in: query
          description: Идентификатор мероприятия
          required: false
          schema:
            type: integer
            format: int64
        - name: confirmedOnly
          in: query
          description: Только неподтвержденные
          required: false
          schema:
            type: boolean
        - name: pageable
          in: query
          description: Параметры пагинации и сортировки
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Страница с бронированиями
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableBookingResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  '/admin/bookings/{id}':
    delete:
      tags:
        - Admin
      summary: Удалить бронирование (Admin)
      operationId: adminBookingsIdDelete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Бронирование удалено
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
components:
  schemas:
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: Должен быть валидным email адресом
      description: Детали ошибки (опционально)
    ErrorResponse:
      required:
        - code
        - level
        - message
      type: object
      properties:
        code:
          type: string
          description: Машинно-читаемый код ошибки
          example: VALIDATION_FAILED
        level:
          type: string
          description: Уровень серьезности
          example: error
          enum:
            - ErrorResponse.LevelEnum.INFO(value=info)
            - ErrorResponse.LevelEnum.WARNING(value=warning)
            - ErrorResponse.LevelEnum.ERROR(value=error)
        message:
          type: string
          description: Человеко-читаемое сообщение
          example: Некоторые поля заполнены неверно
        details:
          type: array
          description: Детали ошибки (опционально)
          items:
            $ref: '#/components/schemas/ErrorDetail'
    NotificationPreferences:
      type: object
      properties:
        notifyNewEvents:
          type: boolean
        notifyUpcoming:
          type: boolean
        notifyBeforeHours:
          maximum: 24
          minimum: 1
          type: integer
          format: int32
    BookingResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        eventId:
          type: integer
          format: int32
        customerEmail:
          type: string
        ticketCount:
          type: integer
          format: int32
        bookingTime:
          type: string
          format: date-time
        expiryTime:
          type: string
          format: date-time
        confirmed:
          type: boolean
        timezone:
          type: object
          properties:
            id:
              type: string
            rules:
              type: object
              properties:
                fixedOffset:
                  type: boolean
                transitions:
                  type: array
                  items:
                    type: object
                    properties:
                      offsetBefore:
                        type: object
                        properties:
                          totalSeconds:
                            type: integer
                            format: int32
                          id:
                            type: string
                      offsetAfter:
                        type: object
                        properties:
                          totalSeconds:
                            type: integer
                            format: int32
                          id:
                            type: string
                      duration:
                        type: object
                        properties:
                          seconds:
                            type: integer
                            format: int64
                          zero:
                            type: boolean
                          nano:
                            type: integer
                            format: int32
                          negative:
                            type: boolean
                          units:
                            type: array
                            items:
                              type: object
                              properties:
                                durationEstimated:
                                  type: boolean
                                timeBased:
                                  type: boolean
                                dateBased:
                                  type: boolean
                      gap:
                        type: boolean
                      dateTimeAfter:
                        type: string
                        format: date-time
                      dateTimeBefore:
                        type: string
                        format: date-time
                      overlap:
                        type: boolean
                      instant:
                        type: string
                        format: date-time
                transitionRules:
                  type: array
                  items:
                    type: object
                    properties:
                      month:
                        type: string
                        enum:
                          - JANUARY
                          - FEBRUARY
                          - MARCH
                          - APRIL
                          - MAY
                          - JUNE
                          - JULY
                          - AUGUST
                          - SEPTEMBER
                          - OCTOBER
                          - NOVEMBER
                          - DECEMBER
                      timeDefinition:
                        type: string
                        enum:
                          - UTC
                          - WALL
                          - STANDARD
                      standardOffset:
                        type: object
                        properties:
                          totalSeconds:
                            type: integer
                            format: int32
                          id:
                            type: string
                      offsetBefore:
                        type: object
                        properties:
                          totalSeconds:
                            type: integer
                            format: int32
                          id:
                            type: string
                      offsetAfter:
                        type: object
                        properties:
                          totalSeconds:
                            type: integer
                            format: int32
                          id:
                            type: string
                      dayOfWeek:
                        type: string
                        enum:
                          - MONDAY
                          - TUESDAY
                          - WEDNESDAY
                          - THURSDAY
                          - FRIDAY
                          - SATURDAY
                          - SUNDAY
                      dayOfMonthIndicator:
                        type: integer
                        format: int32
                      localTime:
                        $ref: '#/components/schemas/LocalTime'
                      midnightEndOfDay:
                        type: boolean
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    BookingUpdateRequest:
      type: object
      properties:
        ticketCount:
          minimum: 1
          type: integer
          format: int32
    EventResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
        dateTime:
          type: string
          format: date-time
        totalTickets:
          type: integer
          format: int32
        availableTickets:
          type: integer
          format: int32
        coverUrl:
          type: string
          description: URL обложки мероприятия
          example: https://example.com/image.jpg
    EventUpdateRequest:
      type: object
      properties:
        title:
          maxLength: 100
          minLength: 0
          type: string
        description:
          type: string
        dateTime:
          type: string
          format: date-time
        totalTickets:
          minimum: 1
          type: integer
          format: int32
    CreateBookingRequest:
      required:
        - eventId
        - ticketCount
      type: object
      properties:
        eventId:
          type: integer
          format: int32
        ticketCount:
          minimum: 1
          type: integer
          format: int32
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        role:
          type: string
          enum:
            - USER
            - ADMIN
    RegisterRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    EventCreateRequest:
      required:
        - dateTime
        - title
        - totalTickets
      type: object
      properties:
        title:
          maxLength: 100
          minLength: 0
          type: string
        description:
          type: string
        dateTime:
          type: string
          format: date-time
        totalTickets:
          minimum: 1
          type: integer
          format: int32
    PageableEventResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/EventResponse'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        last:
          type: boolean
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
      description: Страница с мероприятиями
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageableBookingResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookingResponse'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        last:
          type: boolean
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
      description: Страница с бронированиями
